API란 무엇일까요?

개발을 하며 여러 API를 사용하지만, 마음으로는 알겠으나 설명하라면 정확하게 설명할 수 없었기에

API의 개념에 대해 짧게 정리를 해볼까 합니다.



API란 Application Programming Interface의 약자로,

프로그래밍 언어의 기능을 제어하고 어플리케이션에서 상호작용할 수 있도록 만든 인터페이스입니다.

즉, "컴퓨터간 혹은 소프트웨어 간에 통신할 수 있는 방법"과 같은 느낌입니다.


c
정보를 찾던 도중 찰떡인 비유가 있었습니다. 일련의 개발 과정을 레스토랑으로 비유한 것인데,

테이블(프론트엔드)에서 주문을 하면 식당(백엔드)에서 주문받은 것을 요리하여 제공할 것입니다.

이 때 테이블에서 식당까지 연결해주는 사람이 바로 웨이터(API)인 것입니다.

손님은 주방에서 벌어지는 일을 모두 알진 않지만,

주문한 것(request)에 대해 재료가 없다-는 등의 응답(response)는 들어야합니다.



웹개발을 진행하다 보면 RESTful API(REST API)라 불리는 것을 많이 봐왔을 것입니다.

REST API란 무엇일까요?

REST는 Representational State Transfer의 약자로,

번역하여 이해하자면 이름으로써(Representational) 상태를(State) 주고받는 것(Transfer)이라 생각하면 편합니다.

Client와 Server 사이의 통신 방식 중 하나로, URI(Uniform Resource Identifier, URL의 상위 개념)로 POST, GET, PUT, DELETE와 같은 HTTP 프로토콜 Method를 통해 요청을 보내고, JSON을 통해 표현되어 데이터를 주고 받게 됩니다.



REST API에는 아래와 같은 설계 규칙이 있습니다.

1. /는 계층 관계를 나타내는데 사용합니다.

2. URL 마지막 문자로 /를 포함하지 않습니다.

3. -은 URL 가독성을 높이는데 사용합니다.

4. _은 URL에 사용하지 않습니다.

5. URL 경로에는 소문자가 적합합니다.

6. 파일확장자는 URL에 포함하지 않습니다.

7. URL에 사용되는 영어를 복수형으로 작성합니다. 



또한, 이렇게 설계한 REST API는 다음과 같은 통상적인 HTTP 상태 코드를 따르게 됩니다.

- 1XX : 전송 프로토콜 수준의 정보 교환

- 2XX : 클라이언트 요청이 성공적으로 수행됨

- 3XX : 클라이언트는 요청을 완료하기 위해 추가적인 행동을 취해야 함

- 4XX : 클라이언트의 잘못된 요청

- 5XX : 서버쪽 오류로 인한 상태코드



채용 공고에서 흔히 볼 수 있는 백엔드 API 시스템(혹은 서버) 개발을 한다-는 말의 의미는

해당 서비스에 필요한 백엔드와 같은 기능을 API 형태, 즉 URI를 통한 HTTP 프로토콜로 통신할 수 있는 인터페이스로써 개발한다는 의미입니다. 

